{"name":"Coap.net","tagline":"A C# implementation of the CoAP protocol","body":"CoAP.NET - A CoAP framework in C#\r\n=================================\r\n\r\nThe Constrained Application Protocol (CoAP) (https://datatracker.ietf.org/doc/draft-ietf-core-coap/)\r\nis a RESTful web transfer protocol for resource-constrained networks and nodes.\r\nCoAP.NET is an implementation in C# providing CoAP-based services to .NET applications. \r\nReviews and suggestions would be appreciated.\r\n\r\nContent\r\n-------\r\n- [Quick Start] (#quick-start)\r\n- [Build] (#build)\r\n- [License] (#license)\r\n- [Acknowledgements] (#acknowledgements)\r\n\r\nQuick Start\r\n-----------\r\n\r\nCoAP sessions are considered as request-response pair.\r\n\r\n### CoAP Client\r\n\r\nAccess remote CoAP resources by issuing a **[Request] (CoAP.NET/Request.cs)**\r\nand receive its **[Response] (CoAP.NET/Request.cs)**(s).\r\n\r\n```csharp\r\n  // new a GET request\r\n  Request request = new Request(Code.GET);\r\n  request.URI = new Uri(\"coap://[::1]/hello-world\");\r\n  request.Execute();\r\n  \r\n  // receive one response\r\n  Response response = request.ReceiveResponse();\r\n```\r\n\r\nThere are 4 types of request: GET, POST, PUT, DELETE, defined as\r\n<code>Code.GET</code>, <code>Code.POST</code>, <code>Code.PUT</code>,\r\n<code>Code.DELETE</code>.\r\n\r\nResponses can be received in two ways. By calling <code>request.ReceiveResponse()</code>\r\na response will be received synchronously, which means it will \r\nblock until timeout or a response is arrived. If more responses\r\nare expected, call <code>ReceiveResponse()</code> again.\r\n\r\nTo receive responses asynchronously, register a event handler to\r\nthe event <code>request.Responded</code> before executing.\r\n\r\n> #### Parsing Link Format\r\n> Use <code>RemoteResource.NewRoot()</code> to parse a link-format\r\n  response. The returned root resource contains all resources stated\r\n  in the given link-format string.\r\n> ```csharp\r\n  Request request = new Request(Code.GET);\r\n  request.URI = new Uri(\"coap://[::1]/.well-known/core\");\r\n  request.Execute();\r\n  Response response = request.ReceiveResponse();\r\n  Resource root = RemoteResource.NewRoot(response.PayloadString);\r\n  ```\r\n\r\nSee [CoAP Example Client] (CoAP.Client) for more.\r\n\r\n### CoAP Server\r\n\r\nA new CoAP server can be easily built by just inheriting the class\r\n[**LocalEndPoint**] (CoAP.NET/EndPoint/LocalEndPoint.cs)\r\n\r\n```csharp\r\n  class CoAPServer : LocalEndPoint\r\n  {\r\n  }\r\n  \r\n  static void Main(String[] args)\r\n  {\r\n    CoAPServer server = new CoAPServer();\r\n    Console.WriteLine(\"CoAP server started on port {0}\", server.Communicator.Port);\r\n  }\r\n```\r\n\r\nSee [CoAP Example Server] (CoAP.Server) for more.\r\n\r\n### CoAP Resource\r\n\r\nCoAP resources are classes that can be accessed by a URI via CoAP.\r\nIn CoAP.NET, a resource is defined as a subclass of [**LocalResource**] (CoAP.NET/EndPoint/LocalResource.cs).\r\nBy overriding methods <code>DoGet</code>, <code>DoPost</code>,\r\n<code>DoPut</code> or <code>DoDelete</code>, one resource accepts\r\nGET, POST, PUT or DELETE requests.\r\n\r\nThe following code gives an example of HelloWorldResource, which\r\ncan be visited by sending a GET request to \"/hello-world\", and\r\nrespones a plain string in code \"2.05 Content\".\r\n\r\n```csharp\r\n  class HelloWorldResource : LocalResource\r\n  {\r\n      public HelloWorldResource()\r\n          : base(\"hello-world\")\r\n      {\r\n      }\r\n\r\n      public override void DoGet(Request request)\r\n      {\r\n          Response response = new Response(Code.Content);\r\n          response.PayloadString = \"Hello World from CoAP.NET!\";\r\n          request.Respond(response);\r\n      }\r\n  }\r\n  \r\n  class CoAPServer : LocalEndPoint\r\n  {\r\n      public CoAPServer()\r\n      {\r\n          AddResource(new HelloWorldResource());\r\n      }\r\n  }\r\n```\r\n\r\nSee [CoAP Example Server] (CoAP.Server) for more.\r\n\r\nBuild\r\n-----\r\n\r\nA few compile symbols are introduced to build for different drafts of\r\nCoAP:\r\n\r\n- COAPALL -- all supported drafts below\r\n- COAP03  -- [draft-ietf-core-coap-03] (http://tools.ietf.org/html/draft-ietf-core-coap-03)\r\n- COAP08  -- [draft-ietf-core-coap-08] (http://tools.ietf.org/html/draft-ietf-core-coap-08)\r\n- COAP12  -- [draft-ietf-core-coap-12] (http://tools.ietf.org/html/draft-ietf-core-coap-12)\r\n- COAP13  -- [draft-ietf-core-coap-13] (http://tools.ietf.org/html/draft-ietf-core-coap-13)\r\n\r\nWith COAPALL defined, all supported drafts will be available in class\r\n[**Spec**] (CoAP.NET/Spec.cs):\r\n\r\n```csharp\r\n  public static class Spec\r\n  {\r\n    public static readonly ISpec Draft03;\r\n    public static readonly ISpec Draft08;\r\n    public static readonly ISpec Draft12;\r\n    public static readonly ISpec Draft13;\r\n  }\r\n```\r\n\r\nWith one of the other symbols defined (i.e. COAP08), only a specific\r\nversion of draft will be compiled as the class [**Spec**] (CoAP.NET/Spec.cs),\r\nwith constants and static methods instead of various drafts:\r\n\r\n```csharp\r\n  public static class Spec\r\n  {\r\n    public const String Name = \"draft-ietf-core-coap-08\";\r\n    public const Int32 DefaultPort = 5683;\r\n    public static Byte[] Encode(Message msg);\r\n    public static Message Decode(Byte[] bytes);\r\n  }\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nSee [LICENSE] (LICENSE) for more info.\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nCoAP.NET is based on [**Californium**] (https://github.com/mkovatsc/Californium),\r\na CoAP framework in Java by Matthias Kovatsch, Dominique Im Obersteg,\r\nand Daniel Pauli, ETH Zurich. See <http://people.inf.ethz.ch/mkovatsc/californium.php>.\r\nThanks to the authors and their great job.\r\n","google":"UA-44050658-4","note":"Don't delete this file! It's used internally to help with page regeneration."}